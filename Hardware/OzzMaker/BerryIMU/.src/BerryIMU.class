' Gambas class file

'Dependancy: Must have OzzMaker.com BerryIMU v1.6

'i2c Revisions
Const REVISION_PI1 As Integer = &H00
Const REVISION_PI2_AND_PI3 As Integer = &H01

'Registers / etc:
Const MAG_ADDRESS As Integer = &H1e
Const ACC_ADDRESS As Integer = &H6a '&H1e Switched
Const GYR_ADDRESS As Integer = &H1e '&H6a

'LSM9DS0 Gyro Registers  
Const WHO_AM_I_G As Integer = &H0F
Const CTRL_REG1_G As Integer = &H20
Const CTRL_REG2_G As Integer = &H21
Const CTRL_REG3_G As Integer = &H22
Const CTRL_REG4_G As Integer = &H23
Const CTRL_REG5_G As Integer = &H24
Const REFERENCE_G As Integer = &H25
Const STATUS_REG_G As Integer = &H27
Const OUT_X_L_G As Integer = &H2A '&H28 Switched
Const OUT_X_H_G As Integer = &H2B '&H29
Const OUT_Y_L_G As Integer = &H28 '&H2A
Const OUT_Y_H_G As Integer = &H29 '&H2B
Const OUT_Z_L_G As Integer = &H2C
Const OUT_Z_H_G As Integer = &H2D
Const FIFO_CTRL_REG_G As Integer = &H2E
Const FIFO_SRC_REG_G As Integer = &H2F
Const INT1_CFG_G As Integer = &H30
Const INT1_SRC_G As Integer = &H31
Const INT1_THS_XH_G As Integer = &H32
Const INT1_THS_XL_G As Integer = &H33
Const INT1_THS_YH_G As Integer = &H34
Const INT1_THS_YL_G As Integer = &H35
Const INT1_THS_ZH_G As Integer = &H36
Const INT1_THS_ZL_G As Integer = &H37
Const INT1_DURATION_G As Integer = &H38

'LSM9DS0 Accel And Magneto Registers
Const OUT_TEMP_L_XM As Integer = &H05
Const OUT_TEMP_H_XM As Integer = &H06
Const STATUS_REG_M As Integer = &H07
Const OUT_X_L_M As Integer = &H08
Const OUT_X_H_M As Integer = &H09
Const OUT_Y_L_M As Integer = &H0A
Const OUT_Y_H_M As Integer = &H0B
Const OUT_Z_L_M As Integer = &H0C
Const OUT_Z_H_M As Integer = &H0D
Const WHO_AM_I_XM As Integer = &H0F
Const INT_CTRL_REG_M As Integer = &H12
Const INT_SRC_REG_M As Integer = &H13
Const INT_THS_L_M As Integer = &H14
Const INT_THS_H_M As Integer = &H15
Const OFFSET_X_L_M As Integer = &H16
Const OFFSET_X_H_M As Integer = &H17
Const OFFSET_Y_L_M As Integer = &H18
Const OFFSET_Y_H_M As Integer = &H19
Const OFFSET_Z_L_M As Integer = &H1A
Const OFFSET_Z_H_M As Integer = &H1B
Const REFERENCE_X As Integer = &H1C
Const REFERENCE_Y As Integer = &H1D
Const REFERENCE_Z As Integer = &H1E
Const CTRL_REG0_XM As Integer = &H1F
Const CTRL_REG1_XM As Integer = &H20
Const CTRL_REG2_XM As Integer = &H21
Const CTRL_REG3_XM As Integer = &H22
Const CTRL_REG4_XM As Integer = &H23 
Const CTRL_REG5_XM As Integer = &H24
Const CTRL_REG6_XM As Integer = &H25
Const CTRL_REG7_XM As Integer = &H26
Const STATUS_REG_A As Integer = &H27
Const OUT_X_L_A As Integer = &H28
Const OUT_X_H_A As Integer = &H29
Const OUT_Y_L_A As Integer = &H2A
Const OUT_Y_H_A As Integer = &H2B
Const OUT_Z_L_A As Integer = &H2C
Const OUT_Z_H_A As Integer = &H2D
Const FIFO_CTRL_REG As Integer = &H2E
Const FIFO_SRC_REG As Integer = &H2F
Const INT_GEN_1_REG As Integer = &H30
Const INT_GEN_1_SRC As Integer = &H31
Const INT_GEN_1_THS As Integer = &H32
Const INT_GEN_1_DURATION As Integer = &H33
Const INT_GEN_2_REG As Integer = &H34
Const INT_GEN_2_SRC As Integer = &H35
Const INT_GEN_2_THS As Integer = &H36
Const INT_GEN_2_DURATION As Integer = &H37
Const CLICK_CFG As Integer = &H38
Const CLICK_SRC As Integer = &H39
Const CLICK_THS As Integer = &H3A
Const TIME_LIMIT As Integer = &H3B
Const TIME_LATENCY As Integer = &H3C
Const TIME_WINDOW As Integer = &H3D

Const RAD_TO_DEG As Float = 57.29578
Const M_PI As Float = 3.14159265358979323846
Const G_GAIN As Float = 0.070  '[deg / s / LSB] If you change the dps For gyro, you need To update this value accordingly
Const AA As Float = 0.40       'Complementary filter constant

Public Accelerometer As I2c
Public Gyro As I2c

Public Sub _new()

  Me.Accelerometer = New I2c(REVISION_PI2_AND_PI3, ACC_ADDRESS)
  Me.Gyro = New I2c(REVISION_PI2_AND_PI3, GYR_ADDRESS)

  'Switched Init Sequence from Gyro to Accelerometer

  'initialise the accelerometer
  Me.Gyro.Write8(CTRL_REG1_XM, &X01100111) 'z, y, x axis enabled, continuos update, 100 Hz data rate
  Me.Gyro.Write8(CTRL_REG2_XM, &X00100000) '+ / - 16 G full scale

  'initialise the gyroscope
  Me.Accelerometer.Write8(CTRL_REG1_G, &X00001111) 'Normal power mode, all axes enabled
  Me.Accelerometer.Write8(CTRL_REG4_G, &X00110000) 'Continuos update, 2000 dps full scale

End

Public Function AccelerometerX() As Integer
  Return cSigned(Me.Accelerometer.Read16(OUT_X_L_A))
End

Public Function AccelerometerY() As Integer
  Return cSigned(Me.Accelerometer.Read16(OUT_Y_L_A))
End

Public Function AccelerometerZ() As Integer
  Return cSigned(Me.Accelerometer.Read16(OUT_Z_L_A))
End

Public Function GyroX() As Integer
  Return cSigned(Me.Gyro.Read16(OUT_X_L_G))
End

Public Function GyroY() As Integer
  Return cSigned(Me.Gyro.Read16(OUT_Y_L_G))
End

Public Function GyroZ() As Integer
  Return cSigned(Me.Gyro.Read16(OUT_Z_L_G))
End

' Public oldXAccRawValue As Integer = 0
' Public oldYAccRawValue As Integer = 0
' Public oldZAccRawValue As Integer = 0
' 
' Public LastLoop As Float = Timer()

Public Sub GetValues(ByRef GyroX As Integer, ByRef GyroY As Integer, ByRef GyroZ As Integer, ByRef AccelerometerX As Integer, ByRef AccelerometerY As Integer, ByRef AccelerometerZ As Integer, ByRef ComboX As Integer, ByRef ComboY As Integer, ByRef ComboZ As Integer)

  GyroX = Me.GyroX
  GyroY = Me.GyroY
  GyroZ = Me.GyroZ
  AccelerometerX = Me.AccelerometerX
  AccelerometerY = Me.AccelerometerY
  AccelerometerZ = Me.AccelerometerZ

  'Combine and Filter Values




  'Return Values
  ComboX = GyroX
  ComboY = GyroY
  ComboZ = GyroZ


'   'Read the accelerometer and gyroscope values
  ' Dim ACCx As Integer = Me.AccelerometerX()
  ' Dim ACCy As Integer = Me.AccelerometerY()
  ' Dim ACCz As Integer = Me.AccelerometerZ()
  ' Dim GYRx As Integer = Me.GyroX()
  ' Dim GYRy As Integer = Me.GyroY()
  ' Dim GYRz As Integer = Me.GyroZ()
  ' 
  ' Dim a, b As Date
  ' Dim LP As Long 
  ' 
  ' b = Now - a
  ' a = Now
  ' LP = b / (10000000 * 1)
  
' 
' '         
' '         ##Calculate Loop Period(LP).How long between Gyro Reads
' '         b = datetime.datetime.now() - a
' '         a = datetime.datetime.now()
' '         LP = b.microseconds / (1000000 * 1.0)
' '         Print "Loop Time | %5.2f|" % (LP),
' '         
'  
'   LastLoop = Timer
'   

'         
'         
'         
'         #Apply low pass filter To reduce noise
'         ACC_LPF_FACTOR = 0.05
'         ACCx = ACCx * ACC_LPF_FACTOR + oldXAccRawValue * (1 - ACC_LPF_FACTOR);
'         ACCy = ACCy * ACC_LPF_FACTOR + oldYAccRawValue * (1 - ACC_LPF_FACTOR);
'         ACCz = ACCz * ACC_LPF_FACTOR + oldZAccRawValue * (1 - ACC_LPF_FACTOR);
'         oldXAccRawValue = ACCx;
'         oldYAccRawValue = ACCy;
'         oldZAccRawValue = ACCz;
'         
'         
'         #Convert Gyro raw To degrees per second
'         rate_gyr_x = GYRx * G_GAIN
'         rate_gyr_y = GYRy * G_GAIN
'         rate_gyr_z = GYRz * G_GAIN
' 
' 
'         #Calculate the angles From the gyro. 
'         gyroXangle += rate_gyr_x * LP
'         gyroYangle += rate_gyr_y * LP
'         gyroZangle += rate_gyr_z * LP
' 
' 
'         ##Convert Accelerometer values To degrees
'         AccXangle = (math.atan2(ACCy, ACCz) + M_PI) * RAD_TO_DEG
'         AccYangle = (math.atan2(ACCz, ACCx) + M_PI) * RAD_TO_DEG
'         AccZangle = (math.atan2(ACCy, ACCx) + M_PI) * RAD_TO_DEG
'         
'         ####################################################################
'         ######################Correct rotation value ########################
'         ####################################################################
'         #Change the rotation value Of the accelerometer To - / + 180 And
'         #Move the Y axis '0' point to up.
'         #
'         #Two different pieces Of code are used depending On how your IMU Is Mounted.
'         #If IMU Is Up the correct way, Skull logo Is Facing down, Use these lines
'         #AccXangle -= 180.0
'         #If AccYangle > 90:
'         #AccYangle -= 270.0
'         #else:
'         #AccYangle += 90.0
'         #
'         #
'         #
'         #
'         #If IMU Is Upside down E.g Skull logo Is Facing up;
'         If AccXangle > 180:
'                 AccXangle -= 360.0
'         AccYangle -= 90
'         If (AccYangle > 180):
'                 AccYangle -= 360.0
'         ############################End ##################################
'         If AccZangle > 180:
'                 AccZangle -= 360.0
' 
'                 
'         #Complementary filter used To combine the accelerometer And gyro values.
'         CFangleX = AA * (CFangleX + rate_gyr_x * LP) + (1 - AA) * AccXangle
'         CFangleY = AA * (CFangleY + rate_gyr_y * LP) + (1 - AA) * AccYangle
'         CFangleZ = AA * (CFangleZ + rate_gyr_z * LP) + (1 - AA) * AccZangle
' 
' 
'         If 0: #Change To '0' to stop showing the angles from the accelerometer
'                 Print ("\033[1;34;40mACCX Angle %5.2f ACCY Angle %5.2f  ACCZ Angle %5.2f  \033[0m  " % (AccXangle, AccYangle, AccZangle)),
'         
'         If 0: #Change To '0' to stop  showing the angles from the gyro
'                 Print ("\033[1;31;40m\tGRYX Angle %5.2f  GYRY Angle %5.2f  GYRZ Angle %5.2f" % (gyroXangle, gyroYangle, gyroZangle)),
' 
'         If 1: #Change To '0' to stop  showing the angles from the complementary filter
'                 Print ("\033[1;35;40m   \tCFangleX Angle %5.2f \033[1;36;40m  CFangleY Angle %5.2f  \033[1;33;40m  CFangleZ Angle %5.2f\33[1;32;40m" % (CFangleX, CFangleY, CFangleZ))
' 
' 
' 
'         
'         
'         #limit the angles
'         If CFangleX > angleLimit:
'                 CFangleX = angleLimit
'         If CFangleX < - angleLimit:
'                 CFangleX = - angleLimit
'         If CFangleY > angleLimit:
'                 CFangleY = angleLimit
'         If CFangleY < - angleLimit:
'                 CFangleY = - angleLimit
'                 
'         
'         If CFangleY > 70 Or CFangleY < -70: # If Y angle Is Not between - 70 And 70, Then only show large horizontal bar.
'                 ACC_LPF_FACTOR = 0.05 #lower low pass filter
'                 hBposition = (Int(scaleHonly(CFangleZ)), 190)
'                 screen.blit(img_background_H_only, screen_rect)#Blit the New Image To the surface
'                 screen.blit(img_Hbubble_H_only, hBposition)#Blit the New Image To the surface
'                 screen.blit(img_overlay_H_only, screen_rect)#Blit the New Image To the surface
'         else:
'                 ACC_LPF_FACTOR = 0.3
'                 
'                 hBposition = (Int(scaleH(CFangleX)), 244)
'                 vBposition = (398, Int(scaleV(CFangleY)))
'                 newcBposition = (Int(scaleCH(CFangleX)), Int(scaleCV(CFangleY)))
'                 
'                 #confirm that center bubble Is Within the circle;
'                 If(is_in_circle(181, 117, 90, newcBposition[0], newcBposition[1])):
'                         cBposition = newcBposition
'                 #Blit the New Images To the surface
'                 screen.blit(img_background, screen_rect)
'                 screen.blit(img_Hbubble, hBposition)
'                 screen.blit(img_Vbubble, vBposition)
'                 screen.blit(img_Cbubble, cBposition)
'                 screen.blit(img_overlay, screen_rect)
'         
'         pygame.display.flip()#Show the New Image On the TFT
'         

  
End



Public Function cSigned(Value As Integer) As Integer
  If Value < 32768 
    Return Value
  Else 
    Return Value - 65536
  End If
End


' 
' #!/usr/bin/python
' #
' #This program reads the angles From the acceleromter, gyrscope
' # And converts these To a spirit level
' #
' #http: / / ozzmaker.com /
' #
' #Copyright(C)2016 Mark Williams
' #This Library Is Free software; you can redistribute it And / Or
' #modify it under the terms Of the GNU Library General Public
' #License As Published by the Free Software Foundation; either
' #version 2 Of the License, Or (at your option)any later version.
' #This Library Is Distributed In the hope that it will be useful,
' #but WITHOUT ANY WARRANTY; without even the implied warranty Of
' #MERCHANTABILITY Or FITNESS For A PARTICULAR PURPOSE.See the GNU
' #Library General Public License For more details.
' #You should have received a Copy Of the GNU Library General Public
' #License along With this Library ; If Not, Write To the Free
' #Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
' #MA 02111 - 1307, USA
' 
' import smbus, pygame, os
' import Time
' import math
' From LSM9DS0 import *
' import datetime
' bus = smbus.SMBus(1)
' 
' 
' RAD_TO_DEG = 57.29578
' M_PI = 3.14159265358979323846
' G_GAIN = 0.070 #[deg / s / LSB] If you change the dps For gyro, you need To update this value accordingly
' AA = 0.40 #Complementary filter constant
' 
' 
' 
' def writeACC(register, value):
'         bus.write_byte_data(ACC_ADDRESS, register, value)
'         Return -1
' 
' 
' 
' def writeGRY(register, value):
'         bus.write_byte_data(GYR_ADDRESS, register, value)
'         Return -1
' 
' 
' 
' def readACCx():
'         acc_l = bus.read_byte_data(ACC_ADDRESS, OUT_X_L_A)
'         acc_h = bus.read_byte_data(ACC_ADDRESS, OUT_X_H_A)
'         acc_combined = (acc_l | acc_h <<8)
' 
'         Return acc_combined If acc_combined < 32768 Else acc_combined - 65536
' 
' 
' def readACCy():
'         acc_l = bus.read_byte_data(ACC_ADDRESS, OUT_Y_L_A)
'         acc_h = bus.read_byte_data(ACC_ADDRESS, OUT_Y_H_A)
'         acc_combined = (acc_l | acc_h <<8)
' 
'         Return acc_combined If acc_combined < 32768 Else acc_combined - 65536
' 
' 
' def readACCz():
'         acc_l = bus.read_byte_data(ACC_ADDRESS, OUT_Z_L_A)
'         acc_h = bus.read_byte_data(ACC_ADDRESS, OUT_Z_H_A)
'         acc_combined = (acc_l | acc_h <<8)
' 
'         Return acc_combined If acc_combined < 32768 Else acc_combined - 65536
' 
' 
' 
' def readGYRx():
'         gyr_l = bus.read_byte_data(GYR_ADDRESS, OUT_X_L_G)
'         gyr_h = bus.read_byte_data(GYR_ADDRESS, OUT_X_H_G)
'         gyr_combined = (gyr_l | gyr_h <<8)
' 
'         Return gyr_combined If gyr_combined < 32768 Else gyr_combined - 65536
'   
' 
' def readGYRy():
'         gyr_l = bus.read_byte_data(GYR_ADDRESS, OUT_Y_L_G)
'         gyr_h = bus.read_byte_data(GYR_ADDRESS, OUT_Y_H_G)
'         gyr_combined = (gyr_l | gyr_h <<8)
' 
'         Return gyr_combined If gyr_combined < 32768 Else gyr_combined - 65536
' 
' def readGYRz():
'         gyr_l = bus.read_byte_data(GYR_ADDRESS, OUT_Z_L_G)
'         gyr_h = bus.read_byte_data(GYR_ADDRESS, OUT_Z_H_G)
'         gyr_combined = (gyr_l | gyr_h <<8)
' 
'         Return gyr_combined If gyr_combined < 32768 Else gyr_combined - 65536
' 
' 
' 
'         
' #initialise the accelerometer
' writeACC(CTRL_REG1_XM, 0 b01100111)#z, y, x axis enabled, continuos update, 100 Hz data rate
' writeACC(CTRL_REG2_XM, 0 b00100000)# + / - 16 G full scale
' 
' 
' #initialise the gyroscope
' writeGRY(CTRL_REG1_G, 0 b00001111)#Normal power mode, all axes enabled
' writeGRY(CTRL_REG4_G, 0 b00110000)#Continuos update, 2000 dps full scale
' 
' gyroXangle = 0.0
' gyroYangle = 0.0
' gyroZangle = 0.0
' CFangleX = 0.0
' CFangleY = 0.0
' CFangleZ = 0.0
' 
' a = datetime.datetime.now()
' 
' 
' 
' 
' 
' 
' 
' #####pygame setup., which Is A wrapper For SDL #####
' os.putenv( 'SDL_FBDEV', '/dev/fb1')                              #Set the display to fb1, which is the small TFT
' pygame.display.init()#Initialise pygame.  
' 
' 
' screen = pygame.display.set_mode((480, 320))#Set display mode
' screen_rect = screen.get_rect()#Get the rectangular area Of the screen Surface
' 
' #Load images And convert To the correct format.Alpha Is Needed For PNGs To preserve alpha channel
' img_background = pygame.image.load("spirit-level-background.jpg").convert()
' img_Hbubble = pygame.image.load("spirit-level-Hbubble.png").convert_alpha()
' img_Vbubble = pygame.image.load("spirit-level-Vbubble.png").convert_alpha()
' img_Cbubble = pygame.image.load("spirit-level-Cbubble.png").convert_alpha()
' img_overlay = pygame.image.load("spirit-level-overlay.png").convert_alpha()
' 
' #These images are used when only displaying the horizontal bar
' img_background_H_only = pygame.image.load("spirit-level-H-only-background.jpg").convert()
' img_Hbubble_H_only = pygame.image.load("spirit-level-H-only-bubble.png").convert_alpha()     
' img_overlay_H_only = pygame.image.load("spirit-level-H-only-overlay.png").convert_alpha()
' 
' pygame.mouse.set_visible(False)#Disable the mouse cursor
' 
' a = datetime.datetime.now()
' 
' 
' #Slider limits For bubbles
' hSlideLimit = [62, 252]
' vSlideLimit = [38, 230]
' ChSlideLimit = [95, 267]
' CvSlideLimit = [31, 203]
' angleLimit = 90
' #these functions are used To scale the IMU readings From the angleLimit, To be within the slider Of the bubble view window.
' def scaleH(value):
'         min = - angleLimit
'         max = angleLimit
'         minScale = hSlideLimit[0]
'         maxScale = hSlideLimit[1]
'         scaled = minScale + (value - min) / (max - min) * (maxScale - minScale)
'         Return scaled
' 
' def scaleV(value):
'         
'         min = - angleLimit
'         max = angleLimit
'         minScale = vSlideLimit[0]
'         maxScale = vSlideLimit[1]
'         scaled = minScale + (value - min) / (max - min) * (maxScale - minScale)
'         
'         Return scaled
' 
' 
' #These two are used To scale the value appropriately For the bubble within the circle
' def scaleCH(value):
'         min = - angleLimit
'         max = angleLimit
'         minScale = ChSlideLimit[0]
'         maxScale = ChSlideLimit[1] - 36 #36 Is The width Of the bubble
'         scaled = minScale + (value - min) / (max - min) * (maxScale - minScale)
'         Return scaled
' 
' def scaleCV(value):
'         min = - angleLimit
'         max = angleLimit
'         minScale = CvSlideLimit[0]
'         maxScale = CvSlideLimit[1] - 36 #36 Is The width Of the bubble
'         scaled = minScale + (value - min) / (max - min) * (maxScale - minScale)
'         Return scaled
' 
' def scaleHonly(value):
'         min = - angleLimit + 20
'         max = angleLimit - 20
'         minScale = 53
'         maxScale = 430 - 77 #36 Is The width Of the bubble
'         scaled = minScale + (value - min) / (max - min) * (maxScale - minScale)
'         Return scaled
' 
' 
' #Used To detect If apoint(X And R) Is Within a circle
' #Where circle_x And circle_y Is The center coordinates Of the circle, r Is The radius Of the circle.
' #http: / / stackoverflow.com / questions / 481144 / equation - For - testing - If - a - point - Is - inside - a - circle
' def is_in_circle(circle_x, circle_y, r, x, y):
'     d = math.sqrt((x - circle_x) * * 2 + (y - circle_y) * * 2)
'     Return d <= r
' 
' 
' #used For low pass filter
' oldXAccRawValue = 0
' oldYAccRawValue = 0
' oldZAccRawValue = 0
' 
' While True:
'         
'         
'         
'         #Read the accelerometer, gyroscope And magnetometer values
'         ACCx = readACCx()
'         ACCy = readACCy()
'         ACCz = readACCz()
'         GYRx = readGYRx()
'         GYRy = readGYRy()
'         GYRz = readGYRz()
' 
'         
'         ##Calculate Loop Period(LP).How long between Gyro Reads
'         b = datetime.datetime.now() - a
'         a = datetime.datetime.now()
'         LP = b.microseconds / (1000000 * 1.0)
'         Print "Loop Time | %5.2f|" % (LP),
'         
'         
'         
'         
'         #Apply low pass filter To reduce noise
'         ACC_LPF_FACTOR = 0.05
'         ACCx = ACCx * ACC_LPF_FACTOR + oldXAccRawValue * (1 - ACC_LPF_FACTOR);
'         ACCy = ACCy * ACC_LPF_FACTOR + oldYAccRawValue * (1 - ACC_LPF_FACTOR);
'         ACCz = ACCz * ACC_LPF_FACTOR + oldZAccRawValue * (1 - ACC_LPF_FACTOR);
'         oldXAccRawValue = ACCx;
'         oldYAccRawValue = ACCy;
'         oldZAccRawValue = ACCz;
'         
'         
'         #Convert Gyro raw To degrees per second
'         rate_gyr_x = GYRx * G_GAIN
'         rate_gyr_y = GYRy * G_GAIN
'         rate_gyr_z = GYRz * G_GAIN
' 
' 
'         #Calculate the angles From the gyro. 
'         gyroXangle += rate_gyr_x * LP
'         gyroYangle += rate_gyr_y * LP
'         gyroZangle += rate_gyr_z * LP
' 
' 
'         ##Convert Accelerometer values To degrees
'         AccXangle = (math.atan2(ACCy, ACCz) + M_PI) * RAD_TO_DEG
'         AccYangle = (math.atan2(ACCz, ACCx) + M_PI) * RAD_TO_DEG
'         AccZangle = (math.atan2(ACCy, ACCx) + M_PI) * RAD_TO_DEG
'         
'         ####################################################################
'         ######################Correct rotation value ########################
'         ####################################################################
'         #Change the rotation value Of the accelerometer To - / + 180 And
'         #Move the Y axis '0' point to up.
'         #
'         #Two different pieces Of code are used depending On how your IMU Is Mounted.
'         #If IMU Is Up the correct way, Skull logo Is Facing down, Use these lines
'         #AccXangle -= 180.0
'         #If AccYangle > 90:
'         #AccYangle -= 270.0
'         #else:
'         #AccYangle += 90.0
'         #
'         #
'         #
'         #
'         #If IMU Is Upside down E.g Skull logo Is Facing up;
'         If AccXangle > 180:
'                 AccXangle -= 360.0
'         AccYangle -= 90
'         If (AccYangle > 180):
'                 AccYangle -= 360.0
'         ############################End ##################################
'         If AccZangle > 180:
'                 AccZangle -= 360.0
' 
'                 
'         #Complementary filter used To combine the accelerometer And gyro values.
'         CFangleX = AA * (CFangleX + rate_gyr_x * LP) + (1 - AA) * AccXangle
'         CFangleY = AA * (CFangleY + rate_gyr_y * LP) + (1 - AA) * AccYangle
'         CFangleZ = AA * (CFangleZ + rate_gyr_z * LP) + (1 - AA) * AccZangle
' 
' 
'         If 0: #Change To '0' to stop showing the angles from the accelerometer
'                 Print ("\033[1;34;40mACCX Angle %5.2f ACCY Angle %5.2f  ACCZ Angle %5.2f  \033[0m  " % (AccXangle, AccYangle, AccZangle)),
'         
'         If 0: #Change To '0' to stop  showing the angles from the gyro
'                 Print ("\033[1;31;40m\tGRYX Angle %5.2f  GYRY Angle %5.2f  GYRZ Angle %5.2f" % (gyroXangle, gyroYangle, gyroZangle)),
' 
'         If 1: #Change To '0' to stop  showing the angles from the complementary filter
'                 Print ("\033[1;35;40m   \tCFangleX Angle %5.2f \033[1;36;40m  CFangleY Angle %5.2f  \033[1;33;40m  CFangleZ Angle %5.2f\33[1;32;40m" % (CFangleX, CFangleY, CFangleZ))
' 
' 
' 
'         
'         
'         #limit the angles
'         If CFangleX > angleLimit:
'                 CFangleX = angleLimit
'         If CFangleX < - angleLimit:
'                 CFangleX = - angleLimit
'         If CFangleY > angleLimit:
'                 CFangleY = angleLimit
'         If CFangleY < - angleLimit:
'                 CFangleY = - angleLimit
'                 
'         
'         If CFangleY > 70 Or CFangleY < -70: # If Y angle Is Not between - 70 And 70, Then only show large horizontal bar.
'                 ACC_LPF_FACTOR = 0.05 #lower low pass filter
'                 hBposition = (Int(scaleHonly(CFangleZ)), 190)
'                 screen.blit(img_background_H_only, screen_rect)#Blit the New Image To the surface
'                 screen.blit(img_Hbubble_H_only, hBposition)#Blit the New Image To the surface
'                 screen.blit(img_overlay_H_only, screen_rect)#Blit the New Image To the surface
'         else:
'                 ACC_LPF_FACTOR = 0.3
'                 
'                 hBposition = (Int(scaleH(CFangleX)), 244)
'                 vBposition = (398, Int(scaleV(CFangleY)))
'                 newcBposition = (Int(scaleCH(CFangleX)), Int(scaleCV(CFangleY)))
'                 
'                 #confirm that center bubble Is Within the circle;
'                 If(is_in_circle(181, 117, 90, newcBposition[0], newcBposition[1])):
'                         cBposition = newcBposition
'                 #Blit the New Images To the surface
'                 screen.blit(img_background, screen_rect)
'                 screen.blit(img_Hbubble, hBposition)
'                 screen.blit(img_Vbubble, vBposition)
'                 screen.blit(img_Cbubble, cBposition)
'                 screen.blit(img_overlay, screen_rect)
'         
'         pygame.display.flip()#Show the New Image On the TFT
'         


