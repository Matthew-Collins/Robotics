' Gambas class file

'Dependancy: Must have Adafruit Servo/PWM RaspberryPi Hat

'i2c Revisions
Const REVISION_PI1 As Integer = &H00
Const REVISION_PI2_AND_PI3 As Integer = &H01

'Registers / etc:
Const PCA9685_ADDRESS As Integer = &H40
Const MODE1 As Integer = &H00
Const MODE2 As Integer = &H01
Const SUBADR1 As Integer = &H02
Const SUBADR2 As Integer = &H03
Const SUBADR3 As Integer = &H04
Const PRESCALE As Integer = &HFE
Const LED0_ON_L As Integer = &H06
Const LED0_ON_H As Integer = &H07
Const LED0_OFF_L As Integer = &H08
Const LED0_OFF_H As Integer = &H09
Const LED_NEXT As Integer = &H04
Const ALL_LED_ON_L As Integer = &HFA
Const ALL_LED_ON_H As Integer = &HFB
Const ALL_LED_OFF_L As Integer = &HFC
Const ALL_LED_OFF_H As Integer = &HFD

'Bits:
Const RESTART As Integer = &H80
Const Sleep As Integer = &H10
Const ALLCALL As Integer = &H01
Const INVRT As Integer = &H10
Const OUTDRV As Integer = &H04

'Other:
Const StartPoint As Integer = 150
Const EndPoint As Integer = 600

Public Bus As I2c

Public PlugOrder0To15 As Boolean = True
Public Trims[16] As Integer
Public Normal[16] As Boolean
Public EndPoints[16, 2] As Integer

Public Sub _new()
  Dim Channel As Integer

  Me.Bus = New I2c(REVISION_PI2_AND_PI3, PCA9685_ADDRESS)
  'Me.Bus.Detect

  For Channel = 0 To 15
    Me.Normal[Channel] = True
  Next

  'TODO Finish Initialise and Set Freq to 60hz
  'Me.SetAllPWM(0, 0)
  'Me.Bus.Dump

End

Public Sub SetServo(Channel As Integer, Value As Integer, Optional Max As Integer = 90, Optional Min As Integer = -90)
  Value = (GetReversal(Channel, (Value - Min) / (Max - Min)) * (EndPoint - StartPoint)) + StartPoint
  Value += Me.Trims[Channel]
  Value = GetEndpointAdjustment(Channel, Value)
  Me.SetPWM(GetChannel(Channel), 0, Value)
End

Public Function GetChannel(Channel As Integer) As Integer
  If Me.PlugOrder0To15 Then
    Return Channel
  Else
    Return 15 - Channel
  End If
End

Public Function GetReversal(Channel As Integer, Percent As Float) As Float
  If Me.Normal[Channel] Then
    Return Percent
  Else
    Return 100 - Percent
  End If
End

Public Function GetEndPointAdjustment(Channel As Integer, Value As Integer) As Integer
  If Value < Me.EndPoints[Channel, 0] Then
    Return Me.EndPoints[Channel, 0]
  Else If Me.EndPoints[Channel, 1] > 0 And If Value > Me.EndPoints[Channel, 1]
    Return Me.EndPoints[Channel, 1]
  Else
    Return Value
  End If
End

Public Sub SetAllPWM(OnValue As Integer, OffValue As Integer)
  Me.Bus.Write16(ALL_LED_ON_L, OnValue)
  Me.Bus.Write16(ALL_LED_OFF_L, OffValue)
End

Public Sub SetPWM(Channel As Integer, OnValue As Integer, OffValue As Integer)
  Me.Bus.Write16(LED0_ON_L + (LED_NEXT * Channel), OnValue)
  Me.Bus.Write16(LED0_OFF_L + (LED_NEXT * Channel), OffValue)
End

' def software_reset(i2c = None, * * kwargs):
'     "" "Sends a software reset (SWRST) command to all servo drivers on the bus." ""
'     #Setup I2C interface For device 0 x00 To talk To all Of them.
'     If i2c Is None:
'         import Adafruit_GPIO.I2C As I2C
'         i2c = I2C
'     self._device = i2c.get_i2c_device(0 x00, * * kwargs)
'     self._device.writeRaw8(0 x06)#SWRST
' 
' 
' Class PCA9685(object):
'     "" "PCA9685 PWM LED/servo controller." ""
' 
'     def __init__(self, address = PCA9685_ADDRESS, i2c = None, * * kwargs):
'         "" "Initialize the PCA9685." ""
'         #Setup I2C interface For the device.
'         If i2c Is None:
'             import Adafruit_GPIO.I2C As I2C
'             i2c = I2C
'         self._device = i2c.get_i2c_device(address, * * kwargs)
'         self.set_all_pwm(0, 0)
'         self._device.write8(MODE2, OUTDRV)
'         self._device.write8(MODE1, ALLCALL)
'         time.sleep(0.005)# Wait For oscillator
'         mode1 = self._device.readU8(MODE1)
'         mode1 = mode1 & ~SLEEP  # wake up (reset sleep)
'         self._device.write8(MODE1, mode1)
'         time.sleep(0.005)# Wait For oscillator
' 
'     def set_pwm_freq(self, freq_hz):
'         "" "Set the PWM frequency to the provided value in hertz." ""
'         prescaleval = 25000000.0 #25 MHz
'         prescaleval /= 4096.0 #12 - bit
'         prescaleval /= float(freq_hz)
'         prescaleval -= 1.0
'         logger.debug( 'Setting PWM frequency to {0} Hz'.format(freq_hz))
'         logger.debug( 'Estimated pre-scale: {0}'.format(prescaleval))
'         prescale = Int(math.floor(prescaleval + 0.5))
'         logger.debug( 'Final pre-scale: {0}'.format(prescale))
'         oldmode = self._device.readU8(MODE1);
'         newmode = (oldmode & 0 x7F) | 0x10    # sleep
'         self._device.write8(MODE1, newmode)#go To Sleep
'         self._device.write8(PRESCALE, prescale)
'         self._device.write8(MODE1, oldmode)
'         time.sleep(0.005)
'         self._device.write8(MODE1, oldmode | 0x80)
' 
'     def set_pwm(self, channel, On , off):
'         "" "Sets a single PWM channel." ""
'         self._device.write8(LED0_ON_L + 4 * channel, On & 0 xFF)
'         self._device.write8(LED0_ON_H + 4 * channel, On > > 8)
'         self._device.write8(LED0_OFF_L + 4 * channel, off & 0 xFF)
'         self._device.write8(LED0_OFF_H + 4 * channel, off > > 8)
' 
'     def set_all_pwm(self, On , off):
'         "" "Sets all PWM channels." ""
'         self._device.write8(ALL_LED_ON_L, On & 0 xFF)
'         self._device.write8(ALL_LED_ON_H, On > > 8)
'         self._device.write8(ALL_LED_OFF_L, off & 0 xFF)
'         self._device.write8(ALL_LED_OFF_H, off > > 8)
