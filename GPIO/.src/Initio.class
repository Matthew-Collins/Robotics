' Gambas class file

' Converted to Gambas - Matthew Collins - April 2016
' 
' #! / usr / Bin / python
' #
' #Python Module To externalise all Initio / PiRoCon specific hardware
' #
' #Created by Gareth Davies, Sep 2013
' #Updated May 2014, Feb 2015
' #Copyright 4 tronix
' #
' #This code Is In the Public domain And may be freely copied And used
' #No warranty Is Provided Or implied
' #
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' 
' 
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' #General Functions
' #
' #init().Initialises GPIO pins, switches motors off, etc
' #cleanup().Sets all motors off And sets GPIO To standard values
' #version().Returns 1. Invalid Until after init()has been called
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' 
' 
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' #Motor Functions
' #
' #stop(): Stops both motors
' #forward(speed): Sets both motors To Move forward at speed.0 <= speed <= 100
' #reverse(speed): Sets both motors To reverse at speed.0 <= speed <= 100
' #spinLeft(speed): Sets motors To turn opposite directions at speed.0 <= speed <= 100
' #spinRight(speed): Sets motors To turn opposite directions at speed.0 <= speed <= 100
' #turnForward(leftSpeed, rightSpeed): Moves forwards In an arc by setting different speeds.0 <= leftSpeed, rightSpeed <= 100
' #turnreverse(leftSpeed, rightSpeed): Moves backwards In an arc by setting different speeds.0 <= leftSpeed, rightSpeed <= 100
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' 
' 
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' #IR Sensor Functions
' #
' #irLeft(): Returns state Of Left IR Obstacle sensor
' #irRight(): Returns state Of Right IR Obstacle sensor
' #irAll(): Returns True If either Of the Obstacle sensors are triggered
' #irLeftLine(): Returns state Of Left IR Line sensor
' #irRightLine(): Returns state Of Right IR Line sensor
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' 
' 
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' #UltraSonic Functions
' #
' #getDistance().Returns the distance In cm To the nearest reflecting object.0 == no object
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' 
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' #Servo Functions
' # 
' #startServos().Initialises the servo background process
' #Stop Servos().terminates the servo background process
' #setServo(Servo, Degrees).Sets the servo To position In degrees - 90 To +90
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' 
' 
' #Import all necessary libraries
' import RPi.GPIO As GPIO, sys, threading, Time, os, subproces
Public GPIO As New GPIO

' #Pins 24, 26 Right Motor
' #Pins 19, 21 Left Motor
Public R1 As Integer = 24
Public R2 As Integer = 26
Public L1 As Integer = 19
Public L2 As Integer = 21
' 
' #Define obstacle sensors And Line sensors
Public irFL As Integer = 7
Public irFR As Integer = 11
Public lineRight As Integer = 13
Public lineLeft As Integer = 12
' 
' #Define Sonar Pin(same pin For both Ping And Echo)
' #Note that this can be either 8 Or 23 On PiRoCon
Public Sonar As Integer = 8
' 
Public ServosActive As Boolean = False

Public p As PWM
Public q As PWM
Public a As PWM
Public b As PWM

' 
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' #General Functions
' #
' #init().Initialises GPIO pins, switches motors And LEDs Off, etc
Sub Init()

  GPIO.SetWarnings(False)

  'use physical pin numbering
  GPIO.SetMode(GPIO.Board)
  'Print GPIO.RPI_REVISION

  'set up digital Line detectors As Inputs
  GPIO.Setup(lineRight, GPIO.In)  'Right Line sensor
  GPIO.Setup(lineLeft, GPIO.In)   'Left Line sensor

  'Set up IR obstacle sensors As Inputs
  GPIO.Setup(irFL, GPIO.In)  'Left obstacle sensor
  GPIO.Setup(irFR, GPIO.In)  'Right obstacle sensor

  'use pwm On inputs so motors don 't go too fast
  GPIO.setup(L1, GPIO.Out)
  p = GPIO.PWM(L1, 20)
  p.Start(0)

  GPIO.setup(L2, GPIO.Out)
  q = GPIO.PWM(L2, 20)
  q.Start(0)

  GPIO.setup(R1, GPIO.Out)
  a = GPIO.PWM(R1, 20)
  a.Start(0)

  GPIO.setup(R2, GPIO.Out)
  b = GPIO.PWM(R2, 20)
  b.Start(0)

'     startServos()
End Sub

' #cleanup().Sets all motors off And sets GPIO To standard values
Sub CleanUp()
'     stop()
'     stopServos()
'     GPIO.cleanup()
End Sub

' #version().Returns 1. Invalid Until after init()has been called
Function Version() As Float
     Return 1
End Function
' #End Of General Functions
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' 
' 
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' #Motor Functions
' #
' #stop(): Stops both motors
' def stop():
'     p.ChangeDutyCycle(0)
'     q.ChangeDutyCycle(0)
'     a.ChangeDutyCycle(0)
'     b.ChangeDutyCycle(0)
'     
' #forward(speed): Sets both motors To Move forward at speed.0 <= speed <= 100
' def forward(speed):
'     p.ChangeDutyCycle(speed)
'     q.ChangeDutyCycle(0)
'     a.ChangeDutyCycle(speed)
'     b.ChangeDutyCycle(0)
'     p.ChangeFrequency(speed + 5)
'     a.ChangeFrequency(speed + 5)
'     
' #reverse(speed): Sets both motors To reverse at speed.0 <= speed <= 100
' def reverse(speed):
'     p.ChangeDutyCycle(0)
'     q.ChangeDutyCycle(speed)
'     a.ChangeDutyCycle(0)
'     b.ChangeDutyCycle(speed)
'     q.ChangeFrequency(speed + 5)
'     b.ChangeFrequency(speed + 5)
' 
' #spinLeft(speed): Sets motors To turn opposite directions at speed.0 <= speed <= 100
' def spinLeft(speed):
'     p.ChangeDutyCycle(0)
'     q.ChangeDutyCycle(speed)
'     a.ChangeDutyCycle(speed)
'     b.ChangeDutyCycle(0)
'     q.ChangeFrequency(speed + 5)
'     a.ChangeFrequency(speed + 5)
'     
' #spinRight(speed): Sets motors To turn opposite directions at speed.0 <= speed <= 100
' def spinRight(speed):
'     p.ChangeDutyCycle(speed)
'     q.ChangeDutyCycle(0)
'     a.ChangeDutyCycle(0)
'     b.ChangeDutyCycle(speed)
'     p.ChangeFrequency(speed + 5)
'     b.ChangeFrequency(speed + 5)
'     
' #turnForward(leftSpeed, rightSpeed): Moves forwards In an arc by setting different speeds.0 <= leftSpeed, rightSpeed <= 100
' def turnForward(leftSpeed, rightSpeed):
'     p.ChangeDutyCycle(leftSpeed)
'     q.ChangeDutyCycle(0)
'     a.ChangeDutyCycle(rightSpeed)
'     b.ChangeDutyCycle(0)
'     p.ChangeFrequency(leftSpeed + 5)
'     a.ChangeFrequency(rightSpeed + 5)
'     
' #turnReverse(leftSpeed, rightSpeed): Moves backwards In an arc by setting different speeds.0 <= leftSpeed, rightSpeed <= 100
' def turnReverse(leftSpeed, rightSpeed):
'     p.ChangeDutyCycle(0)
'     q.ChangeDutyCycle(leftSpeed)
'     a.ChangeDutyCycle(0)
'     b.ChangeDutyCycle(rightSpeed)
'     q.ChangeFrequency(leftSpeed + 5)
'     b.ChangeFrequency(rightSpeed + 5)
' 
' #End Of Motor Functions
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' 
' 
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' #IR Sensor Functions
' #
' #irLeft(): Returns state Of Left IR Obstacle sensor
' def irLeft():
'     If GPIO.input(irFL) == 0:
'         Return True
'     else:
'         Return False
'     
' #irRight(): Returns state Of Right IR Obstacle sensor
' def irRight():
'     If GPIO.input(irFR) == 0:
'         Return True
'     else:
'         Return False
'     
' #irAll(): Returns True If any Of the Obstacle sensors are triggered
' def irAll():
'     If GPIO.input(irFL) == 0 Or GPIO.input(irFR) == 0:
'         Return True
'     else:
'         Return False
'     
' #irLeftLine(): Returns state Of Left IR Line sensor
' def irLeftLine():
'     If GPIO.input(lineLeft) == 0:
'         Return True
'     else:
'         Return False
'     
' #irRightLine(): Returns state Of Right IR Line sensor
' def irRightLine():
'     If GPIO.input(lineRight) == 0:
'         Return True
'     else:
'         Return False
'     
' #End Of IR Sensor Functions
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' 
' 
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' #UltraSonic Functions
' #
' #getDistance().Returns the distance In cm To the nearest reflecting object.0 == no object
' def getDistance():
'     GPIO.setup(sonar, GPIO.OUT)
'     #Send 10 us pulse To trigger
'     GPIO.output(sonar, True)
'     time.sleep(0.00001)
'     GPIO.output(sonar, False)
'     start = time.time()
'     count = time.time()
'     GPIO.setup(sonar, GPIO.IN)
'     While GPIO.input(sonar) == 0 And time.time() - count < 0.1:
'         start = time.time()
'     count = time.time()
'     Stop = count
'     While GPIO.input(sonar) == 1 And time.time() - count < 0.1:
'         Stop = time.time()
'     #Calculate pulse length
'     elapsed = Stop - start
'     #Distance pulse travelled In that Time Is Time
'     #multiplied by the speed Of sound(cm / s)
'     distance = elapsed * 34000
'     #That was the distance there And back so halve the value
'     distance = distance / 2
'     Return distance
' 
' #End Of UltraSonic Functions    
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' 
' # == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
' #Servo Functions
' #Pirocon / microcon use ServoD To control servos
' 
' def setServo(Servo, Degrees):
'     global ServosActive
'     #Print "ServosActive:", ServosActive
'     #Print "Setting servo"
'     If ServosActive == False:
'         startServos()
'     pinServod(Servo, Degrees)# For Now, simply pass On the Input values
' 
' def stopServos():
'     #Print "Stopping servo"
'     stopServod()
'     
' def startServos():
'     #Print "Starting servod as CPU =", CPU
'     startServod()
'     
' def startServod():
'     global ServosActive
'     #Print "Starting servod. ServosActive:", ServosActive
'     SCRIPTPATH = os.path.split(os.path.realpath(__file__))[0]
'     #os.system("sudo pkill -f servod")
'     initString = "sudo " + SCRIPTPATH + '/servod --pcm --idle-timeout=20000 --p1pins="18,22" > /dev/null'
'     os.system(initString)
'     #Print initString
'     ServosActive = True
' 
' def pinServod(pin, degrees):
'     #Print pin, degrees
'     pinString = "echo " + Str(pin) + "=" + Str(50 + ((90 - degrees) * 200 / 180)) + " > /dev/servoblaster"
'     #Print pinString
'     os.system(pinString)
'     
' def stopServod():
'     global ServosActive
'     os.system("sudo pkill -f servod")
'     ServosActive = False
' 
' 
